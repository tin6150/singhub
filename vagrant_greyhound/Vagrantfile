# vim: filetype=ruby shiftwidth=2 tabstop=2 noexpandtab nosmarttab noautoindent nosmartindent paste 
#
# tin 2020.0615 simplified, no ansible

# run as:
# sudo vagrant up # in the same directory where the Vagrantfile is located.
# it is important to run as root so that VM image is stored in /root/VirtualBox\ VMs
# well, actually cuz of space, root's vbox config redirect file store to /clusterfs/gretadev/data/VBoxVM

# enable disk resize feature
# https://www.vagrantup.com/docs/disks/usage
# but may not be needed by the vboxmanage modifyhd clause
VAGRANT_EXPERIMENTAL="disks"

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

# Install vagrant-disksize to allow resizing the vagrant box disk.
# vagrant plugin install vagrant-disksize
unless Vagrant.has_plugin?("vagrant-disksize")
    raise  Vagrant::Errors::VagrantError.new, "vagrant-disksize plugin is missing. Please install it using 'vagrant plugin install vagrant-disksize' and rerun 'vagrant up'"
end

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  #config.vm.box = "base"
  config.vm.box = "greyhound"	
  config.vm.box_url = 'http://cloud.centos.org/centos/8/vagrant/x86_64/images/CentOS-8-Vagrant-8.2.2004-20200611.2.x86_64.vagrant-virtualbox.box' # 2020.0903
  config.vm.hostname = "greyhound"
  #
  #
  # Create a forwarded port mapping which allows access to a specific port
  #config.vm.network :forwarded_port, guest: 5901, host: 5918	# vncserver :1 # hopefully cli works

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network
  #config.vm.network "private_network", ip: "10.22.22.5" # dummy placeholder for vbox eth0 (nat)
  config.vm.network "public_network",  bridge:"eno2",      ip:"128.3.32.87",   netmask:"255.255.252.0" # vbox eth1
  config.vm.network "public_network",  bridge:"enp94s0f0", ip:"172.22.44.155", netmask:"255.255.255.0" # vbox eth2
  # vagrant does not allow creating bridge for 10.22.22.x, vbox host-only net conflict, 
  # so will have to fiddle that subsequently with vbox cmd...
  # private_network is 'host-only'.  stupid vagrant nomenclature.
  #
  #?config.vm.network "private_network", bridge:"enp94s0f0", ip:"192.22.44.155", netmask:"255.255.255.0" # vbox eth2?

  # set netmask
  #config.vm.provision "shell",
  #  run: "always",
  #  inline: "ifconfig eth1 128.3.32.87 netmask 255.255.0.0 up"

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  ## below worked for zink vbox 5.2.42_Ubuntur137960 Vagrant 2.0.2, and it is the magic to make vbox create vdi file :-\
  # need to halt and up to get new size
  # and to run parted and growfs as provision cmd inside the os
  config.disksize.size = "110GB" 

  # https://www.vagrantup.com/docs/providers/virtualbox/configuration
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  config.vm.provider "virtualbox" do |vb|
      # Display the VirtualBox GUI when booting the machine
      #vb.gui = true
      vb.gui = false # ie headless mode, but may not want to boot headlessly...
   
      # Customize the amount of memory on the VM:
      # default seems to be 512
      #vb.memory = "1024"
      vb.memory = "8192"
      # Use VBoxManage to customize the VM. For example to change memory:
      vb.customize ["modifyvm", :id, "--memory", "16384"]
      #vb.cpus = "2"
      vb.customize ["modifyvm", :id, "--cpus", "7"]
  end

  ## vagrant provision run this section ##
  config.vm.provision "shell", inline: <<-SHELL
  # may need to add additional nic cfg here
  # ifconfig eth1 128.3.32.87 netmask 255.255.0.0 up

  touch   /Vagrant_provision
  date >> /Vagrant_provision
  echo "rhel8 yum redirect to dnf"
  yum -y install vim wget curl git autoconf automake libtool 
  yum -y install virt-what net-tools traceroute telnet nmap-ncat # nmap-ncat provides nc # net-tools provide route cmd
  yum -y install epel-release
  yum -y install ansible

  #yum -y install python2  # rhel8 call this python2, and neeeded by ansible
  alternatives --set python /usr/bin/python3

  ## resize
  echo "resizing partition, hopefully safe with every reprovision :)"
  ##sudo parted /dev/sda resizepart 1 -1 && sudo xfs_growfs /
  echo "yes\n100%" | sudo parted /dev/sda ---pretend-input-tty unit % resizepart 1 && sudo xfs_growfs /
  ## buggy parted see https://bugs.launchpad.net/ubuntu/+source/parted/+bug/1270203
  
  # install docker-ce -- https://www.linuxtechi.com/install-docker-ce-centos-8-rhel-8/
  ##yum -y install containers-common containernetworking-plugins container-selinux ## no explicit need
  dnf config-manager --add-repo=https://download.docker.com/linux/centos/docker-ce.repo
  dnf install docker-ce --nobest -y
  systemctl start docker
  systemctl enable docker
  # docker compose
  curl -L "https://github.com/docker/compose/releases/download/1.25.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  chmod +x /usr/local/bin/docker-compose

  date
  echo "TRACE L145: Vagrant shell provision os update next--maybe skipped"
  #yum -y --quiet update
  #yum -y  update
  #yum -y  update --excluce="docker*"
  date | tee -a  /Vagrant_provision
  echo "TRACE L240: End of vagrant provision via shell block" | tee -a /Vagrant_provision
  SHELL
 
  # delete default gw on eth0 (stupid nic vagrant insist on creating)
  config.vm.provision "shell",
    run: "always",
    inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"
    # route del default gw 10.0.2.2

  # reconfigure eth2 to have desired IP for eth2, since Vagrant refused to build machine with that IP range  ## ++FIXME to use 10.22.22.4
  config.vm.provision "shell",
    run: "always",
    inline: "ifconfig eth2 10.22.22.44 netmask 255.255.0 up"
  config.vm.provision "shell",
    run: "always",
    inline: "/sbin/ip route add 10.22.22.0/24  dev eth2"

  # default router ## this fail if already done and rest of Vagrant not run... so put at the end.
  config.vm.provision "shell",
    run: "always",
    inline: "route add default gw 128.3.34.146"
    # do NOT add "GATEWAY=128.3.34.146" to ifcfg-eth1, instead, use systemd_net_fix.services to create route.  relying on vagrant up --provision is also unreliable

end
